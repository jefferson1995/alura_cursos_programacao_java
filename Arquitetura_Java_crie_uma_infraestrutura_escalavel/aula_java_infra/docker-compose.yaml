services:
  db:
    image: postgres:latest  # Usa a imagem mais recente do PostgreSQL.
    env_file: env/postgres.env  # Carrega as variáveis de ambiente do arquivo `postgres.env` para configurar o banco.
    volumes:
      - ./postgres-data:/var/lib/postgresql/data  # Monta o volume local `postgres-data` para persistir os dados do PostgreSQL no diretório de dados padrão do Postgres, evitando perda de dados após reinicializações.
      - ./data.sql:/docker-entrypoint-initdb.d/data.sql  # Monta o script SQL `data.sql` na pasta `docker-entrypoint-initdb.d`, que é executado automaticamente ao iniciar o container pela primeira vez para inicializar o banco com dados.
    restart: unless-stopped  # Reinicia automaticamente o container a menos que seja explicitamente parado.
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "$POSTGRES_USER"]  # Comando para verificar a saúde do container do banco, usando o utilitário `pg_isready` com o usuário definido em `POSTGRES_USER`.
      interval: 5s  # Define o intervalo entre as verificações de saúde como 5 segundos.
      timeout: 5s  # Define o tempo limite para cada tentativa de verificação de saúde como 5 segundos.
      retries: 10  # Especifica que o container tentará 10 vezes antes de ser considerado inativo.



  app-1: &app
    image: aula_java_infra-app:latest
    #container_name: "user-infra-app"  # Define o nome do container como `user-infra-app`.
    env_file: ./env/app.env  # Carrega as variáveis de ambiente do arquivo `app.env` para configurar a aplicação.
    restart: unless-stopped  # Reinicia automaticamente o container da aplicação a menos que seja explicitamente parado.
    depends_on:
      db:
        condition: service_healthy  # Define uma dependência com o serviço `db` (PostgreSQL), garantindo que ele esteja saudável antes de iniciar o container da aplicação.
    expose:
      - "8087:8087"
  app-2:
      <<: *app

  nginx:
    image: nginx  # Define a imagem do Docker que será usada para o serviço nginx. Neste caso, a imagem oficial do Nginx.
    ports:
      - "8087:8087"  # Mapeia a porta 8080 do container para a porta 8080 do host. Ou seja, as requisições na porta 8080 do host serão encaminhadas para a porta 8080 do container.
    volumes:
      - ./nginx.conf:/etc/ngnix/ngnix.conf:ro  # Monta um volume, mapeando o diretório local `./ngnix` para o diretório `/etc/ngnix/conf.d` no container. Isso permite personalizar os arquivos de configuração do Nginx localmente.
    restart: unless-stopped  # Configura a política de reinício do container. O container será reiniciado automaticamente, exceto se for explicitamente parado.
    depends_on:
      - app-1  # Garante que o serviço `nginx` só será iniciado após o serviço `app` ter iniciado com sucesso.
      - app-2


  redis:
    image: redis:7.2.4  # Define a imagem do Redis a ser usada, especificando a versão 7.2.4.
    restart: unless-stopped  # Configura a política de reinício do Redis, reiniciando automaticamente, a menos que o container seja explicitamente parado.
    ports:
      - "6379:6379"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M


volumes:
    postgres-data:  # Define um volume nomeado `postgres-data`. Este volume será usado para armazenar os dados de um banco de dados PostgreSQL, garantindo persistência mesmo se o container for removido ou reiniciado.

